# QuickerCleaner Elite Edition - Docker Compose Configuration
# Provides easy container orchestration for development and testing

version: '3.8'

services:
  # Development environment
  dev:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - QUICK_CLEANER_DEBUG=true
      - QUICK_CLEANER_DRY_RUN=true
      - QUICK_CLEANER_LOG_LEVEL=DEBUG
    command: ["python", "-m", "quickercleaner.main", "--help"]
    profiles:
      - dev

  # Production environment
  prod:
    build:
      context: .
      target: production
    environment:
      - QUICK_CLEANER_LOG_LEVEL=INFO
      - QUICK_CLEANER_DRY_RUN=false
    volumes:
      - ./logs:/app/logs
    command: ["python", "-m", "quickercleaner.main", "--help"]
    profiles:
      - prod

  # Testing environment
  test:
    build:
      context: .
      target: test
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - QUICK_CLEANER_TEST_MODE=true
      - QUICK_CLEANER_DRY_RUN=true
      - QUICK_CLEANER_LOG_LEVEL=DEBUG
    command: ["pytest", "--cov=quickercleaner", "--cov-report=term-missing"]
    profiles:
      - test

  # Linting and code quality checks
  lint:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: >
      sh -c "
        echo 'Running flake8...' &&
        flake8 quickercleaner/ --count --exit-zero --max-complexity=10 --max-line-length=88 &&
        echo 'Running black check...' &&
        black --check --diff quickercleaner/ &&
        echo 'Running mypy...' &&
        mypy quickercleaner/ --ignore-missing-imports &&
        echo 'All linting checks passed! âœ…'
      "
    profiles:
      - lint

  # Code formatting
  format:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: ["black", "quickercleaner/"]
    profiles:
      - format

  # Type checking
  typecheck:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: ["mypy", "quickercleaner/", "--ignore-missing-imports"]
    profiles:
      - typecheck

  # Security checks
  security:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: >
      sh -c "
        pip install safety &&
        safety check
      "
    profiles:
      - security

  # Build package
  build:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - ./dist:/app/dist
    command: ["python", "-m", "build"]
    profiles:
      - build

  # Interactive development shell
  shell:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - QUICK_CLEANER_DEBUG=true
      - QUICK_CLEANER_DRY_RUN=true
    stdin_open: true
    tty: true
    command: ["/bin/bash"]
    profiles:
      - shell

  # GUI application (requires X11 forwarding on Linux)
  gui:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    environment:
      - DISPLAY=${DISPLAY}
      - QUICK_CLEANER_GUI_THEME=system
    command: ["python", "-m", "quickercleaner.gui"]
    profiles:
      - gui

  # CLI with interactive mode
  cli:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    environment:
      - QUICK_CLEANER_VERBOSE=true
    stdin_open: true
    tty: true
    command: ["python", "-m", "quickercleaner.main", "--interactive"]
    profiles:
      - cli

  # Performance profiling
  profile:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: >
      sh -c "
        python -m cProfile -o profile.stats quickercleaner/main.py --scan C: --dry-run &&
        echo 'Profile data saved to profile.stats'
      "
    profiles:
      - profile

  # Documentation generation
  docs:
    build:
      context: .
      target: development
    volumes:
      - .:/app
    command: >
      sh -c "
        echo 'Documentation is available in README.md and QUICK_START.md' &&
        echo 'Generating API documentation...' &&
        python -c 'import quickercleaner; help(quickercleaner)'
      "
    profiles:
      - docs

# Networks
networks:
  default:
    driver: bridge

# Volumes
volumes:
  logs:
    driver: local
  cache:
    driver: local 